"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" written by Shotaro Fujimoto (https://github.com/ssh0)
"
" -----------------------------------------------------------------------------
" Initial Setting:                                                          {{{
" -----------------------------------------------------------------------------

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" --------------------------------------------------------------------------}}}
" Plugin Manager NeoBundle:                                                 {{{
" -----------------------------------------------------------------------------

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: Yout don't set neobundle setting in .gvimrc!

" colorscheme
NeoBundle 'ssh0/easy-reading.vim'
" It's my color theme.
" Project directory:
" ($HOME/Workspace/5/easy-reading.vim/colors/easy-reading.vim)

" Surround
NeoBundle 'surround.vim'

" Commentary
NeoBundle 'tpope/vim-commentary'

" Basic, unite and vimfiler
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'

" ctrlp.vim
NeoBundle 'kien/ctrlp.vim'

" unite-mark
NeoBundle 'tacroe/unite-mark'

" vim-signature
NeoBundle 'kshenoy/vim-signature'

" Folding
NeoBundle 'LeafCage/foldCC'

" open-browser
NeoBundle 'tyru/open-browser.vim'

" vim-quickrun
NeoBundle 'thinca/vim-quickrun'

" vim-template
NeoBundle 'thinca/vim-template'

" powerline settings
NeoBundle 'alpaca-tc/alpaca_powertabline'
NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
NeoBundle 'Lokaltog/powerline-fontpatcher'

" for markdown
NeoBundle 'rcmdnk/vim-markdown', {
      \ 'depends': [
      \   'godlygeek/tabular',
      \]}
NeoBundle 'joker1007/vim-markdown-quote-syntax'

" for LaTeX
NeoBundle 'lervag/vimtex'

" for Python
NeoBundle 'davidhalter/jedi-vim'
NeoBundleLazy 'hynek/vim-python-pep8-indent', {
      \ "autoload": {"insert": 1, "filetype": ["python", "python3", "djangohtml"]}}

" autocomplete
NeoBundle 'ujihisa/neco-look', {
      \ 'depends': [
      \   'Shougo/neocomplcache.vim',
      \]}

" easily sent a gista
NeoBundle 'lambdalisue/vim-gista', {
      \ 'depends': [
      \   'Shougo/unite.vim',
      \   'tyru/open-browser.vim',
      \]}

call neobundle#end()

" If there are uninstalled bundles dfound on startup,
" this will conveiently prompt you to install them.
NeoBundleCheck

" --------------------------------------------------------------------------}}}
" Required:                                                                 {{{
" -----------------------------------------------------------------------------

filetype plugin indent on

" --------------------------------------------------------------------------}}}
" FileType:                                                                 {{{
" -----------------------------------------------------------------------------

" markdown
autocmd BufRead,BufNewFile *.{mkd,md} set filetype=markdown

" bib file
autocmd BufRead,BufNewFile *.bib set filetype=bib
autocmd Filetype bib let &formatprg="bibclean"

" python
autocmd Filetype python let &formatprg="autopep8 -"

" html
let html_to_html  = "pandoc --from=html --to=markdown"
let html_to_html .= " | pandoc --from=markdown --to=html"
autocmd Filetype html let &formatprg=html_to_html

" --------------------------------------------------------------------------}}}
" Plugin option settings:                                                   {{{
" -----------------------------------------------------------------------------

" VimFiler
" vim use vimfiler as file manager instead of netry.
let g:vimfiler_as_default_explorer = 1

" unite-mark
let g:unite_source_mark_marks =
\   "abcdefghijklmnopqrstuvwxyz"
\ . "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
\ . "0123456789.'`^<>[]{}()\""
" key bind: `` or ''

" Gista
let g:gista#github_user = 'ssh0'
let g:gista#update_on_write = 1

" template
" <%= %> の中身をvimで評価して展開する:
autocmd User plugin-template-loaded
  \ silent %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
" テンプレートに以下のように書いておくと日付に展開されます。
" <%= strftime('%Y-%m-%d') %>

" <+CURSOR+> にカーソルを移動する
autocmd User plugin-template-loaded
  \    if search('<+CURSOR+>')
  \  |   execute 'normal! "_da>'
  \  | endif

" jedi completeplt
let g:jedi#auto_vim_configuration = 0

" for open-browser plugin
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" QuickRun {{{
" -----------------------------------------------------------------------------
"
let g:quickrun_config = {}
let g:quickrun_no_default_key_mapping = 0

" --------------------------------------------------------------------------}}}

" vim-markdown
" Unset Disable folding
let g:vim_markdown_folding_disabled = 1
" Disable Default Key Mapping
let g:vim_markdown_no_default_key_mappings = 1
" LaTeX math
let g:vim_markdown_math = 1

" Folding
set foldtext=FoldCCtext()

" Signature
" Highlight signs of marks dynamically based upon state indicated by
" vim-gitgutter or vim-signify
let g:SignatureMartTextHLDynamic = 1

" --------------------------------------------------------------------------}}}
" Color scheme:                                                             {{{
" -----------------------------------------------------------------------------

" To show current color scheme by
" ':so $VIMRUNTIME/syntax/hitest.vim'
colorscheme easy-reading

autocmd! FileType markdown hi! def link markdownItalic Normal

" --------------------------------------------------------------------------}}}
" Set Options:                                                              {{{
" -----------------------------------------------------------------------------

" 行番号は表示しない
set nonumber

" Don't redraw screen during macros
set lazyredraw

" マウスを有効にする
if has('mouse')
  set mouse=a
endif

"カーソルキーで行末／行頭の移動可能に設定
set whichwrap=b,s,[,],<,>

"Tab幅を設定
set softtabstop=4
set shiftwidth=4
set expandtab

"自動的にインデントする
set autoindent
" set smartindent

" 入力されているテキストの最大幅
set textwidth=0

"タイトルを表示
set title

"コマンドラインの高さ (gvimはgvimrcで指定)
set cmdheight=1
set laststatus=2

" modeline: ファイルごとのoptionを使用する
set modeline

"コマンドをステータス行に表示しない
set noshowcmd

"Tab、行末の半角スペース、行の終わりを明示的に表示する
set list
set listchars=tab:▸\ ,trail:~

" showbreaks
set showbreak=↪

" 対応する括弧を表示
set showmatch
set matchtime=1

" 検索結果のハイライト
set hlsearch

" Show matches while typing
set incsearch

" " folding
set fdm=marker " zf(def) zd(delete) zo(open) zc(close)
set foldcolumn=1
set fillchars=vert:\|

" バックアップファイルを作成しない
set nowritebackup
set nobackup
set noswapfile

" 無名クリップボードを使う(他のアプリケーションと連動)
set clipboard=unnamedplus,autoselect

" 80文字で折り返すようにする(PEP8)
set colorcolumn=80

" 補完メニューの高さを指定する
set pumheight=10

" スクロール送りを開始する前後の行数を指定
set scrolloff=5

" Vimdiffで毎回左右分割する
set diffopt=vertical

" ESCの反応を素早くする
set timeout timeoutlen=400 ttimeoutlen=75

" --------------------------------------------------------------------------}}}
" Indent:                                                                   {{{
" -----------------------------------------------------------------------------

autocmd FileType sh         setlocal sw=2 sts=2 ts=2 et
autocmd FileType apache     setlocal sw=4 sts=4 ts=4 et
autocmd FileType css        setlocal sw=4 sts=4 ts=4 noet
autocmd FileType diff       setlocal sw=4 sts=4 ts=4 noet
autocmd FileType html       setlocal sw=4 sts=4 ts=4 noet
autocmd FileType java       setlocal sw=4 sts=4 ts=4 et
autocmd FileType javascript setlocal sw=4 sts=4 ts=4 noet
autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
autocmd FileType eruby      setlocal sw=2 sts=2 ts=2 et
autocmd FileType sql        setlocal sw=4 sts=4 ts=4 et
autocmd FileType vim        setlocal sw=2 sts=2 ts=2 et
autocmd FileType xml        setlocal sw=4 sts=4 ts=4 noet
autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
autocmd FileType zsh        setlocal sw=2 sts=2 ts=2 et
autocmd FileType coffee     setlocal sw=2 sts=2 ts=2 et

" --------------------------------------------------------------------------}}}
" My function:                                                              {{{
" -----------------------------------------------------------------------------

function! Markdown_h1()
  normal! VypVr=
endfunction

function! Markdown_h2()
  normal! VypVr-
endfunction

function! Markdown_h3()
  normal! I### 
endfunction

" --------------------------------------------------------------------------}}}
" Key Bindings:                                                             {{{
" -----------------------------------------------------------------------------

" <Space>をmapleaderに
let mapleader = "\<Space>"
let localleader = "\<Space>"

" jjでエスケープ
inoremap <silent> jj <ESC>

" unite-mark
nnoremap <silent> `` :Unite mark<CR>
nnoremap <silent> '' :Unite mark<CR>

" <Space> + l で相対行表示のトグル
nnoremap <silent> <Leader>l :setlocal relativenumber! number!<CR>

" 矢印キーでなら行内を動けるように
nnoremap <Down> gj
nnoremap <Up>   gk

" H -> 0
nnoremap H 0
" L -> $
nnoremap L $

" 行頭から前の行の最後に移動
nnoremap h <Left>zv

" 行末から次の行の先頭に移動
nnoremap l <Right>zv

" 行末までヤンク
nnoremap Y y$

" craeate new tab
nnoremap <silent> <C-t> :tabnew<CR>

" num increment :help CTRL-A, :help CTRL-X
nnoremap + <C-a>
nnoremap - <C-x>

" 入力モードでカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

" vimfiler
nnoremap <silent> <Leader>e :VimFilerBufferDir -buffer-name=explorer -split
\ -simple -winwidth=35 -toggle -no-quit<CR>

" ハイライトの取り消し ESC2回押し
nnoremap <ESC><ESC> :nohlsearch<CR>

" デフォルトで新しいタブでファイルを開く
nnoremap gf <C-w>gf
" ファイルを新たに作成してタブで開く
nnoremap gF :tabedit <C-r><C-f><CR>

" 複数のタグジャンプをデフォルトでみる
nnoremap <C-]> g<C-]>

" 日本語入力がオンのままでもインサートモードに移行できるように(Enterキーは必要)
nnoremap あ a
nnoremap い i
nnoremap う u
nnoremap お o
nnoremap っd dd
nnoremap っy yy

" ""の中身を変更する
nnoremap し” ci"
" ''の中身を変更する
nnoremap し’ ci'

" 日本語入力で”っj”と入力してもEnterキーで確定させればインサートモードを抜ける
inoremap <silent> っj <ESC>

" source current opening file
map <Leader>sop :source %<CR>

" CtrlP
nnoremap <Leader>om :CtrlPMixed<CR>
nnoremap <Leader>oo :CtrlPMRUFiles<CR>
" Onece CtrlP is open:
" * Press `<F5>` to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
" * Press `<c-f>` and `<c-b>` to cycle between modes.
" * Press `<c-d>` to switch to filename only search instead of full path.
" * Press `<c-r>` to switch to regexp mode.
" * Use `<c-j>`, `<c-k>` or the arrow keys to navigate the result list.
" * Use `<c-t>` or `<c-v>`, `<c-x>` to open the selected entry in a new tab or in a new split.
" * Use `<c-n>`, `<c-p>` to select the next/previous string in the prompt's history.
" * Use `<c-y>` to create a new file and its parent directories.
" * Use `<c-z>` to mark/unmark multiple files and `<c-o>` to open them.

" myfunctions
nnoremap <Leader>h1 :call Markdown_h1()<CR>
nnoremap <Leader>h2 :call Markdown_h2()<CR>
nnoremap <Leader>h3 :call Markdown_h3()<CR>

" --------------------------------------------------------------------------}}}
