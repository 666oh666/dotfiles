#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
# written by Shotaro Fujimoto (https://github.com/ssh0)


# General settings ---------------------------------------------------------{{{ 
# -----------------------------------------------------------------------------
#

# enable utf-8
setw -g utf8 on

# max history limit
set -g history-limit 5000

# escape time
set -s escape-time 0

# count windows stating with 1 instead of 0
set -g base-index 1
set -g pane-base-index 1

# Automatically set window title
setw -g automatic-rename off

# }}}

# Keybind Documentation ----------------------------------------------------{{{
# -----------------------------------------------------------------------------
#
# I prefered using Alt key instead "Prefix + something".
# And I'm using xmonad, so these key-bindings are similar to xmonad's one.
# My xmonad config is here:
#     https://github.com/ssh0/dotfiles/blob/master/.xmonad/xmonad.hs
#

# 
# Abbreviation:
# - [key]
# - (key) <- with Alt (or in MacOS, Command key)
# 
# Structure in one session:
# 
#       ------------------
#       |  (Left,Right)  ↓(num) OR click status bar       ↓ (Enter)
#    window1 <------> window2          window3         window4
# ===============================================================
#     pane1            pane1            pane1           pane1
#       ↕ (j,k)
#     pane2     - - -  pane2  - - - -> (pane2)
#               |          [Shift+Right]
#    (pane3) <- -      pane3
#          [Shift+Left]  ↓ (x)                            ↓ (X)
#                        x                                x
# 
# 
# In a window:
# 
#   +---------------+------------+
#   |pane1          |pane3       |
#   |               |            |
#   |               |            |
#   +---------------+            |
#   |pane2          |            |
#   |               |            |
#   |               |            |
#   +---------------+------------+
# 
# split pane:
#   - vertically         : (|)
#   - horizontally       : (-)
# select pane            : (j,k) OR click the pane with mouse
# shift pane             : (J,K)
# kill pane              : (x)
# change layout          : (Space)
# fullscreen             : (f)
# resize pane:
#             (a)
#              ↑
#        (h) ← + → (l)
#              ↓        OR drag pane-border with mouse
#             (z)
# join to another window : [Shift+Left/Right]
# # }}}
# Unbind default keys ------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

unbind %
unbind &
unbind 0
unbind 1
unbind 2
unbind 3
unbind 4
unbind 5
unbind 6
unbind 7
unbind 8
unbind 9
unbind c
unbind l
unbind n
unbind o
unbind p
unbind s
unbind t
unbind x
unbind {
unbind }
unbind Up
unbind Down
unbind Left
unbind Right
unbind M-n
unbind M-o
unbind M-p
unbind M-Left 
unbind M-Down 
unbind M-Up
unbind M-Right
unbind C-Left 
unbind C-Down 
unbind C-Up
unbind C-Right
unbind Space
# }}}
# Keybind (normal mode) ----------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

# vi like key binding
setw -g mode-keys vi
bind-key -t vi-copy v begin-selection

# if session has > 1 windows in current, kill-pane without confirmation.
# But confirm before killing pane when it is the last  pane in the last window.
bind -n M-x if "tmux display -p \"#{session_windows}\" | grep ^1\$ && tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in the only window? It will kill this session too. (y/n)\" kill-pane" \
    "kill-pane"

# if session has > 1 windows in current, kill-window without confirmation.
# But confirm before killing window when it is the last window in the session. 
bind -n M-X if "tmux display -p \"#{session_windows}\" | grep ^1\$"\
    "confirm-before -p \"Kill the only window in this session? It will kill the session too. (y/n)\" kill-window" \
    "kill-window"

# split window (easily remember)
bind -n M-- split-window -v
bind -n M-| split-window -h

# move between panes (xmonad like)
bind -n M-j select-pane -t :.+
bind -n M-k select-pane -t :.-

# swap pane
bind -n M-J swap-pane -D
bind -n M-K swap-pane -U

# join pane
bind -n S-Right join-pane -t :+
bind -n S-Left join-pane -t :-

# resize panes (xmonad like)
bind -n M-h resize-pane -L 1
bind -n M-z resize-pane -D 1
bind -n M-a resize-pane -U 1
bind -n M-l resize-pane -R 1

# maximize pane ("f"ull screen)
bind -n M-f resize-pane -Z

# move between window
bind -n M-Right next-window
bind -n M-Left previous-window

# next layout
bind -n M-Space next-layout

# switch windows Alt+number
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# select-window by name typing
bind s command-prompt "select-window -t '%%'"

# create new window
bind -n M-Enter new-window

# choose-tree
bind t choose-tree

# ^b + r => reload config file
bind r source-file ~/.tmux.conf \; display "Reloaded!"
# }}}
# Keybind (copy mode) ------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

# v: select start with v (default Space)
bind -t vi-copy v begin-selection

# V: select line
bind -t vi-copy V select-line

# C-v: select rectangular
bind -t vi-copy C-v rectangle-toggle

# y: yank
bind -t vi-copy y copy-selection

# Y: yank line
bind -t vi-copy Y copy-line
# }}}
# Mouse settings -----------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

# if you drag the cursor, start copy mode
set -g mode-mouse on

# you can choose pane by mouse
set -g mouse-select-pane on

# you can choose window by mouse
set -g mouse-select-window on

# you can resize pane by mouse
set -g mouse-resize-pane on
# }}}

# Color --------------------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#
# use 256colors
set -g default-terminal screen-256color

# pane border
set -g pane-active-border-fg white
set -g pane-active-border-bg colour236
set -g pane-border-fg colour236
set -g pane-border-bg colour236

# status bar
set -g status-fg white
set -g status-bg colour236

# window list
setw -g window-status-fg white
setw -g window-status-bg default
setw -g window-status-attr dim

# message line
set -g message-fg white
set -g message-bg colour234
set -g message-attr bright
# }}}
# WM window title ----------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

# enable wm window titles
set -g set-titles on

# wm window title string (uses status bar variables)
set -g set-titles-string "[#S-#I] #W"
# }}}
# Status line --------------------------------------------------------------{{{
# -----------------------------------------------------------------------------
#

set -g status-utf8 on
set -g status-position top
set -g status-justify "centre"
set -g status-left '#[fg=colour26,bg=colour234]▒▓#[fg=colour255,bg=colour26] #S #[fg=colour26,bg=colour236]'
set -g status-right '#P #[fg=colour236,bg=colour234]▓▒░'
# set -g status-right '#[fg=colour248,bg=colour236]#[fg=colour236,bg=colour248,bold] %a %m/%d %H:%M '
setw -g window-status-format " #I: #W "
setw -g window-status-current-format "#[fg=colour248,bg=colour236]#[fg=colour236,bg=colour248,bold] #I:#W #[fg=colour248,bg=colour236]"

# }}}
